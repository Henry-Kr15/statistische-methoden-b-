:PROPERTIES:
:ID:       6ce0ec8e-9fbb-455a-b7f7-1214389861ce
:END:
#+title: Exercise 4
#+startup: latexpreview inlineimages
#+options: toc:nil

In a lab experiment the following values are measured:

#+attr_html: :width 500px
[[attachment:_20231113_113154asymmetrie.png]]


The asymmetry values have a measurement value of $\pm0.011$. The theory says that the
asymmetry is described by an ansatz of the form

\begin{equation*}
   f(\psi) = A_{0} \cos{\psi + \delta}.
\end{equation*}

* a
Start with the ansatz

\begin{equation*}
   f(\psi) = a_{1} f_{1}(\psi) + a_{2} f_{2} (\psi) = a_{1} \cos(\psi) + a_{2} \sin{(\psi)}
\end{equation*}

and write down the design matrix *A*.

#+attr_html: :width 800px
[[attachment:_20231113_113805Bildschirmfoto vom 2023-11-13 11-37-55.png]]

#+begin_src python :results output :session
import numpy as np

psi = np.radians(np.arange(0, 331, 30)) # muss damit numpy nicht weint in rad umgewandelt werden
measurement = np.array([-0.032, 0.010, 0.057, 0.068, 0.076, 0.080, 0.031, 0.005, -0.041, -0.090, -0.088, -0.074])
measurement_error = 0.011

A = np.column_stack([np.cos(psi), np.sin(psi)])
print(f"A = {A}")
#+end_src

#+RESULTS:
#+begin_example
A = [[ 1.00000000e+00  0.00000000e+00]
 [ 8.66025404e-01  5.00000000e-01]
 [ 5.00000000e-01  8.66025404e-01]
 [ 6.12323400e-17  1.00000000e+00]
 [-5.00000000e-01  8.66025404e-01]
 [-8.66025404e-01  5.00000000e-01]
 [-1.00000000e+00  1.22464680e-16]
 [-8.66025404e-01 -5.00000000e-01]
 [-5.00000000e-01 -8.66025404e-01]
 [-1.83697020e-16 -1.00000000e+00]
 [ 5.00000000e-01 -8.66025404e-01]
 [ 8.66025404e-01 -5.00000000e-01]]
#+end_example


* b

Calculate the solution vector $\hat{a}$ for the parameters using the method of the least squares.

The solution vector $\hat{a}$ can be calculated as $\hat{a} = (\bf{A}^{T} \cdot \bf{A})^{-1} \bf{A}^{T} y$:

#+begin_src python :results output :session
a = np.linalg.inv(A.T @ A) @ A.T @ measurement
print(f"a = {a}")
#+end_src

#+RESULTS:
: a = [-0.0375063   0.07739978]

# The symbol @ means matrix multiplication in python 3.5 and higher; * denotes element-wise multiplication.

* c

Calculate the covariance matrix $\bf{V}[\hat{a}]$ as well as the errors of $a_1$ and $a_2$ and the correlation coefficient.

The covariance matrix of $\hat{a}$ is given by $\bf{V}[\hat{a}] = \sigma^2 (\bf{A}^{T} \cdot \bf{A})^{-1}$, where $\sigma$ denotes the measurement error.

#+begin_src python :results output :session
V = measurement_error**2 * np.linalg.inv (A.T @ A)
print(f"V = {V}")
#+end_src

#+RESULTS:
: V = [[ 2.01666667e-05 -1.31944981e-21]
:  [-1.31944981e-21  2.01666667e-05]]

The error of $a_1$ and $a_2$ can be calculated via the diagonal elements of the covariance matrix:

#+begin_src python :results output :session
a_error = np.sqrt(np.diag(V))
print(f"a_error ={a_error}")
#+end_src

#+RESULTS:
: a_error =[0.00449073 0.00449073]

* d

Calculate $A_0$ and $\delta$, their error and the correlation of $a_1$ and $a_2$.

#+attr_html: :width 700px
[[attachment:_20231113_125723Bildschirmfoto vom 2023-11-13 12-56-57.png]]

#+begin_src python :results output :session
A_0 = a[0] * np.sqrt((a[1]**2 / a[0]**2) -1)
delta = np.arctan(-a[1]/a[0])
print(f"A_0 = {A_0}")
print(f"delta = {delta}")
#+end_src

#+RESULTS:
: A_0 = -0.06770526541757381
: delta = 1.1195615399310932

The error of a solution vector $\vec{y} = f(\vec{x})$ is can be computed by using $\bf{V}[\vec{y}] = \bf{J} \cdot \bf{V}[\vec{x}] \cdot \bf{J}^{T}$.
Calculate the Jacobian matrix of $f(\vec{x}) = \begin{bmatrix} A_0 \\ \delta \end{bmatrix}$ :

#+attr_html: :width 700px
[[attachment:_20231113_133423Bildschirmfoto vom 2023-11-13 13-34-03.png]]

#+begin_src python :results output :session
J = np.array([[(-a[0]/(np.sqrt(a[1]**2 - a[0]**2))), (a[1]/(np.sqrt(a[1]**2 - a[0]**2)))],
              [(a[1]/(a[0]**2 + a[1]**2)),           (-a[0]/(a[0]**2 + a[1]**2))]])

V_2 = J @ V @ J.T
errors = np.sqrt(np.diag(V_2))
# correlation_coefficient = V_2[1,0] / V_2[0,0]
correlation_coefficient = V_2[1,0] / errors[0]**2

print(f"Fehler von A_0: {errors[0]}")
print(f"Fehler von delta: {errors[1]}")
print(f"Korrelationskoeffizient:{correlation_coefficient}")
#+end_src

#+RESULTS:
: Fehler von A_0: 0.005704736193232627
: Fehler von delta: 0.05221269485613977
: Korrelationskoeffizient:7.183441097416744
